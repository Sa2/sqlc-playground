// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_detail.sql

package db

import (
	"context"
)

const createUserDetail = `-- name: CreateUserDetail :one
INSERT INTO user_details (
  id, user_id, detail_info1, detail_info2
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, user_id, detail_info1, detail_info2, created_at
`

type CreateUserDetailParams struct {
	ID          string `json:"id"`
	UserID      string `json:"user_id"`
	DetailInfo1 string `json:"detail_info1"`
	DetailInfo2 string `json:"detail_info2"`
}

func (q *Queries) CreateUserDetail(ctx context.Context, arg CreateUserDetailParams) (UserDetail, error) {
	row := q.db.QueryRow(ctx, createUserDetail,
		arg.ID,
		arg.UserID,
		arg.DetailInfo1,
		arg.DetailInfo2,
	)
	var i UserDetail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DetailInfo1,
		&i.DetailInfo2,
		&i.CreatedAt,
	)
	return i, err
}

const getUserDetail = `-- name: GetUserDetail :many
SELECT
 id, user_id, detail_info1, detail_info2, created_at 
FROM
 user_details
`

func (q *Queries) GetUserDetail(ctx context.Context) ([]UserDetail, error) {
	rows, err := q.db.Query(ctx, getUserDetail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserDetail
	for rows.Next() {
		var i UserDetail
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DetailInfo1,
			&i.DetailInfo2,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
